import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 *
 * Basic methods to help secure passwords in the system.
 *
 * @author Albert Lionelle <br>
 *         lionelle@colostate.edu <br>
 *         Computer Science Department <br>
 *         Colorado State University
 * @version 202010
 */
public class SecurityHash {


    /**
     * Encodes passwords, so when they are stored in the filesystem/database, they are not viewable to anyone
     * else who has access to the file, including admins. This is standard for storing passwords in databases
     * as not all admins can be trusted with a giant list of clients + passwords, not to mention what happens
     * if the database data is compromised.
     *
     * Minimally modified Code from: https://www.baeldung.com/sha-256-hashing-java
     *
     * @param pw the password to encode
     * @return a hexadecimal encoded password
     */
    public static String encodePassword(String pw) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedhash = digest.digest(pw.getBytes(StandardCharsets.UTF_8));
            return bytesToHex(encodedhash); // converting to hex
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Converts an array of bytes to a hexadecimal String for storage
     * Code from: https://www.baeldung.com/sha-256-hashing-java
     *
     * @param hash a byte array generated by a MessageDigest
     * @return a hexadecimal String
     */
    private static String bytesToHex(byte[] hash) {
        StringBuilder hexString = new StringBuilder();
        for(byte b : hash) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }

}
